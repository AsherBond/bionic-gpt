// @generated by protobuf-ts 2.2.2
// @generated from protobuf file "api.proto" (package "vault", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Vault } from "./api";
import type { CreateSecretsResponse } from "./api";
import type { CreateSecretsRequest } from "./api";
import type { GetVaultResponse } from "./api";
import type { GetVaultRequest } from "./api";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetServiceAccountResponse } from "./api";
import type { GetServiceAccountRequest } from "./api";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service vault.Vault
 */
export interface IVaultClient {
    // These methods are called by the CLI.

    /**
     * Get a service account and all the secrets inside, we need
     * the public ecdh address of the service account.
     *
     * @generated from protobuf rpc: GetServiceAccount(vault.GetServiceAccountRequest) returns (vault.GetServiceAccountResponse);
     */
    getServiceAccount(input: GetServiceAccountRequest, options?: RpcOptions): UnaryCall<GetServiceAccountRequest, GetServiceAccountResponse>;
    // These methods are called by the front end. Authentication is
    // provided by barricade.

    /**
     * Get a vault and all the secrets inside as well as connected service accounts
     *
     * @generated from protobuf rpc: GetVault(vault.GetVaultRequest) returns (vault.GetVaultResponse);
     */
    getVault(input: GetVaultRequest, options?: RpcOptions): UnaryCall<GetVaultRequest, GetVaultResponse>;
    /**
     * This method is called when we create a secret or when we attach a service account
     * to a vault.
     * In both cases we need to encrypt secrets and send them to 0 or more service accounts
     *
     * @generated from protobuf rpc: CreateSecrets(vault.CreateSecretsRequest) returns (vault.CreateSecretsResponse);
     */
    createSecrets(input: CreateSecretsRequest, options?: RpcOptions): UnaryCall<CreateSecretsRequest, CreateSecretsResponse>;
}
/**
 * @generated from protobuf service vault.Vault
 */
export class VaultClient implements IVaultClient, ServiceInfo {
    typeName = Vault.typeName;
    methods = Vault.methods;
    options = Vault.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    // These methods are called by the CLI.

    /**
     * Get a service account and all the secrets inside, we need
     * the public ecdh address of the service account.
     *
     * @generated from protobuf rpc: GetServiceAccount(vault.GetServiceAccountRequest) returns (vault.GetServiceAccountResponse);
     */
    getServiceAccount(input: GetServiceAccountRequest, options?: RpcOptions): UnaryCall<GetServiceAccountRequest, GetServiceAccountResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetServiceAccountRequest, GetServiceAccountResponse>("unary", this._transport, method, opt, input);
    }
    // These methods are called by the front end. Authentication is
    // provided by barricade.

    /**
     * Get a vault and all the secrets inside as well as connected service accounts
     *
     * @generated from protobuf rpc: GetVault(vault.GetVaultRequest) returns (vault.GetVaultResponse);
     */
    getVault(input: GetVaultRequest, options?: RpcOptions): UnaryCall<GetVaultRequest, GetVaultResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetVaultRequest, GetVaultResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * This method is called when we create a secret or when we attach a service account
     * to a vault.
     * In both cases we need to encrypt secrets and send them to 0 or more service accounts
     *
     * @generated from protobuf rpc: CreateSecrets(vault.CreateSecretsRequest) returns (vault.CreateSecretsResponse);
     */
    createSecrets(input: CreateSecretsRequest, options?: RpcOptions): UnaryCall<CreateSecretsRequest, CreateSecretsResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateSecretsRequest, CreateSecretsResponse>("unary", this._transport, method, opt, input);
    }
}
